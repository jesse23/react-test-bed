var j=Object.defineProperty;var S=(e,t,c)=>t in e?j(e,t,{enumerable:!0,configurable:!0,writable:!0,value:c}):e[t]=c;var i=(e,t,c)=>S(e,typeof t!="symbol"?t+"":t,c);import{r as o,j as s,d as m,e as C}from"./index-RaPwYqHn.js";function E({options:e,onChange:t}){const[c,l]=o.useState(e[0]);return e.map(n=>s.jsxs("label",{children:[s.jsx("input",{type:"radio",value:n,checked:c===n,onChange:u=>{l(u.target.value),t(u.target.value)}}),n]},n))}const d=e=>{const t=o.useRef(e),[c,l]=o.useState(e);return t.current=c,{getData:()=>t.current,setData:l}};function g(){const{getData:e,setData:t}=d({selected:6}),[c,l]=o.useState(e().selected);return s.jsxs("div",{children:[s.jsx("h3",{children:"Sample V0 (No fix, show the symptom)"}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0}),l(e().selected)})},children:"Select None"})]})}const v=function(e){let t=o.useRef([]);const c=()=>t.current;return{schedulePostDispatchEvents:o.useCallback(({execute:n,context:u={}})=>{let r=c();const a={schedulerId:Math.floor(Math.random()*1e5),execute:n,type:e,context:u,unschedule:function(){let h=r.findIndex(p=>p.schedulerId===this.schedulerId);h!==-1&&r.splice(h,1)}};return r.push(a),t.current=r,a},[e]),queue:c}},R=(e,t)=>{const c=o.useCallback(l=>{const n=e();if(n.length===0)return;n.filter(r=>r.type===l).map(r=>(r.execute(),console.log(`useProcessJobQueue: job ${r.schedulerId} executed`),r)).forEach(r=>{r.unschedule.bind(r)()})},[e]);o.useEffect(function(){console.log(`useProcessJobQueue: Executing jobs for ${t}`),c(t)})};function D(){const{getData:e,setData:t}=d({selected:6}),[c,l]=o.useState(e().selected),{schedulePostDispatchEvents:n,queue:u}=v("test");return o.useEffect(()=>{Promise.resolve().then(()=>{e().selected===0&&n({execute:()=>{console.log("Job (schedule in use effect promise) executed")}})})},[e().selected]),R(u,"test"),s.jsxs("div",{children:[s.jsx("h3",{children:"Sample V1 (by DeferJobQueue Polyfill)"}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0}),n({execute:()=>{l(e().selected)}})}).then(()=>fetch("/")).then(()=>{n({execute:()=>{console.log("Job (schedule in action promise) executed")}})}),setTimeout(()=>n({execute:()=>{console.log("Job (schedule in action setTimeout) executed")}}),100)},children:"Select None"})]})}const _=()=>{const e=o.useRef([]),[t,c]=o.useState(0),l=o.useCallback(n=>{e.current.push(n),c(u=>u+1)},[]);return o.useEffect(()=>{if(e.current.length>0){const n=[...e.current];e.current=[],n.forEach(u=>{try{u.execute()}catch(r){console.error("useDeferredEffect: Error executing job:",r)}})}},[t]),{defer:l}};function y(){const{getData:e,setData:t}=d({selected:6}),[c,l]=o.useState(e().selected),{defer:n}=_();return o.useEffect(()=>{Promise.resolve().then(()=>{e().selected===0&&n({execute:()=>{console.log("Job (schedule in use effect promise) executed")}})})},[e().selected]),s.jsxs("div",{children:[s.jsx("h3",{children:"Sample V2 (by fixed DeferJobQueue Polyfill)"}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0}),n({execute:()=>{l(e().selected)}})}).then(()=>fetch("/")).then(()=>{n({execute:()=>{console.log("Job (schedule in action promise) executed")}})}),setTimeout(()=>n({execute:()=>{console.log("Job (schedule in action setTimeout) executed")}}),100)},children:"Select None"})]})}function P(){const{getData:e,setData:t}=d({selected:6}),[c,l]=o.useState(e().selected);return o.useEffect(()=>{l(e().selected)},[e]),s.jsxs("div",{children:[s.jsx("h3",{children:"Sample V3 (by state update)"}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0})})},children:"Select None"})]})}const V=e=>{const t=o.useRef(e),[c,l]=o.useState(e);return{getData:()=>t.current,setData:n=>{t.current=n,l(n)}}};function k(){const{getData:e,setData:t}=V({selected:6}),[c,l]=o.useState(e().selected);return s.jsxs("div",{children:[s.jsx("h3",{children:"Sample V4 (by agnostic state)"}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0}),l(e().selected)})},children:"Select None"})]})}const x="r18-batch-sample-loader-element";function f(){const[e,t]=o.useState("V0");return s.jsxs("div",{children:[s.jsx("h1",{children:"React18 Batch Adjustment Sample"}),s.jsx(E,{options:["V0","V1","V2","V3","V4"],onChange:c=>t(c)}),e==="V0"&&s.jsx(g,{}),e==="V1"&&s.jsx(D,{}),e==="V2"&&s.jsx(y,{}),e==="V3"&&s.jsx(P,{}),e==="V4"&&s.jsx(k,{})]})}customElements.define(x,class extends HTMLElement{constructor(){super(...arguments);i(this,"_root",null);i(this,"_reactRootElem",null)}_unmountReactComponent(){this._root?(this._root.unmount(),this._root=null):m.unmountComponentAtNode(this._reactRootElem)}_mountReactComponent(t){t?m.render(o.createElement(f),this._reactRootElem):(this._root=C.createRoot(this._reactRootElem),this._root.render(o.createElement(f)))}connectedCallback(){const t=document.createElement("input");t.type="checkbox",t.checked=!1,t.addEventListener("change",()=>{this._unmountReactComponent(),this._mountReactComponent(t.checked)}),this.appendChild(t),this.appendChild(document.createTextNode("Compatible Mode"));const c=document.createElement("div");this.appendChild(c),this._reactRootElem=c,this._mountReactComponent(!1)}disconnectedCallback(){this._unmountReactComponent(),this._reactRootElem=null,this._root=null}});function T(){return o.createElement(x)}export{T as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
