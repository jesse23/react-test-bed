import{j as e,r as n,f as x}from"./index-Ck-_GQcj.js";import{u as j}from"./DataProvider-CYoF5J8u.js";function p(){const[t,l]=n.useState(!0),[c,s]=n.useState(!0),[i,h]=n.useState(!1),{getData:r,setData:a}=j({selected:6},t),[o,u]=n.useState(r().selected);return e.jsxs("div",{children:[e.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{a({selected:0}),u(r().selected)})},children:"Select None"}),e.jsxs("h3",{children:["Parent Component (concurrent=",t.toString(),")"]}),e.jsx("div",{children:e.jsxs("label",{children:[e.jsx("input",{type:"checkbox",checked:t,onChange:d=>l(d.target.checked)})," Enable Concurrent Mode"]})}),e.jsxs("div",{children:["Current selection (by state): ",r().selected]}),e.jsxs("div",{children:["Current selection (by action): ",o]}),e.jsxs("h3",{children:["Child Component 1 (by action, concurrent=",c.toString(),")"]}),e.jsx("div",{children:e.jsxs("label",{children:[e.jsx("input",{type:"checkbox",checked:c,onChange:d=>s(d.target.checked)})," Enable Concurrent Mode"]})}),e.jsx(C,{parentSelected:r().selected,concurrentMode:c}),e.jsxs("h3",{children:["Child Component 2 (by action, concurrent=",i.toString(),")"]}),e.jsx("div",{children:e.jsxs("label",{children:[e.jsx("input",{type:"checkbox",checked:i,onChange:d=>h(d.target.checked)})," Enable Concurrent Mode"]})}),e.jsx(C,{parentSelected:o,concurrentMode:i})]})}const C=({parentSelected:t,concurrentMode:l})=>{const c=n.useRef(t),s=n.useRef(l),[i,h]=n.useState(t),[r,a]=n.useState(`${t} + 1`);s.current=l;const o=u=>{h(()=>(c.current=u,u))};return n.useEffect(()=>{s.current?o(t):x.flushSync(()=>o(t)),s.current?a(`${c.current} + 1`):x.flushSync(()=>a(`${c.current} + 1`))},[t]),e.jsxs("div",{children:["Parent selection: ",r]})},f=()=>e.jsx(p,{});export{f as ReactUpgradeSample,f as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
