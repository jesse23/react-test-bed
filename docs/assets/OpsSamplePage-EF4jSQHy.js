var g=Object.defineProperty;var f=(t,o,i)=>o in t?g(t,o,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[o]=i;var d=(t,o,i)=>f(t,typeof o!="symbol"?o+"":o,i);import{c as x,R as C,M as h,s as w,a as b,u as v,r as l,j as n,b as p,p as S}from"./index-Cwa6gy_8.js";class j extends HTMLElement{constructor(){super();d(this,"_root");this._root=x(this)}connectedCallback(){this._root.render(C.createElement(h,{id:this.id}))}disconnectedCallback(){this._root.unmount()}}customElements.define("my-component",j);w({topic:"selectionChanged",handler:t=>{console.log("[page] Received parentSelectionChanged:",t)}});b({topic:"app-level-api",handler:async t=>({response:`app-level-api: ${t.message}`})});const E=()=>{v("./OpsSamplePage.css","dynamic-css");const[t,o]=l.useState("Call component-level-api in iframe component"),[i,s]=l.useState("Call component-level-api in web component"),[u,c]=l.useState("Call component-level-api in native component"),[y,m]=l.useState("Call component-level-api in popup component"),r=l.useRef(null);return n.jsxs(n.Fragment,{children:[n.jsx("button",{style:{marginBottom:"10px"},onClick:()=>{const e=window.open("/#/ops_popup","popupWindow","width=600,height=600,resizable=yes,scrollbars=yes,status=no,toolbar=no,location=no,menubar=no");r.current=e},children:"Open a popup window"}),n.jsx("button",{style:{marginBottom:"10px"},onClick:()=>{var e;p({topic:"component-level-api",channel:"my-component-iframe-component-sample",payload:{message:"Hello, world!"}},(e=document.getElementById("iframe-sample"))==null?void 0:e.contentWindow).then(a=>{o(JSON.stringify(a))}).catch(a=>{o(JSON.stringify(a))})},children:t}),n.jsx("button",{style:{marginBottom:"10px"},onClick:()=>{p({topic:"component-level-api",channel:"my-component-web-component-sample",payload:{message:"Hello, world!"}}).then(e=>{s(JSON.stringify(e))}).catch(e=>{s(JSON.stringify(e))})},children:i}),n.jsx("button",{style:{marginBottom:"10px"},onClick:()=>{p({topic:"component-level-api",channel:"my-component-native-component-sample",payload:{message:"Hello, world!"}}).then(e=>{c(JSON.stringify(e))}).catch(e=>{c(JSON.stringify(e))})},children:u}),n.jsx("button",{style:{marginBottom:"10px"},onClick:()=>{p({topic:"component-level-api",channel:"my-component-popup-component-sample",payload:{message:"Hello, world!"}},r.current).then(e=>{m(JSON.stringify(e))}).catch(e=>{m(JSON.stringify(e))})},children:y}),n.jsx("button",{style:{marginBottom:"100px"},onClick:()=>{var e;S({topic:"parentSelectionChanged",channel:"my-component-iframe-component-sample",payload:{component:"page",uid:"uid2"}},(e=document.getElementById("iframe-sample"))==null?void 0:e.contentWindow)},children:"Publish parentSelectionChanged event to iframe component"}),n.jsxs("div",{style:{width:"100%",height:"100%",display:"flex",flex:1,flexDirection:"row"},children:[n.jsx("div",{style:{width:"100%",height:"100%",display:"flex",flex:1,flexDirection:"column"},children:n.jsx("iframe",{id:"iframe-sample",src:"./#/ops_iframe",style:{width:"100%",height:"inherit",overflow:"hidden",border:"none"}})}),n.jsx("div",{style:{width:"100%",height:"100%",display:"flex",flex:1,flexDirection:"column"},children:l.createElement("my-component",{id:"web-component-sample"})}),n.jsx("div",{id:"native-component-sample",style:{width:"100%",height:"100%",display:"flex",flex:1,flexDirection:"column"},children:n.jsx(h,{id:"native-component-sample"})})]})]})};export{E as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
