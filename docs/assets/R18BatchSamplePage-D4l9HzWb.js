var j=Object.defineProperty;var S=(e,t,c)=>t in e?j(e,t,{enumerable:!0,configurable:!0,writable:!0,value:c}):e[t]=c;var d=(e,t,c)=>S(e,typeof t!="symbol"?t+"":t,c);import{r as l,j as s,d as m,e as C}from"./index-Ck-_GQcj.js";import{u as E,a as i}from"./DataProvider-CYoF5J8u.js";function v({options:e,onChange:t}){const[c,o]=l.useState(e[0]);return e.map(n=>s.jsxs("label",{children:[s.jsx("input",{type:"radio",value:n,checked:c===n,onChange:u=>{o(u.target.value),t(u.target.value)}}),n]},n))}function g({concurrentMode:e=!1}){const{getData:t,setData:c}=E({selected:6},e),[o,n]=l.useState(t().selected);return s.jsxs("div",{children:[s.jsx("h3",{children:"Sample V0 (No fix, show the symptom)"}),s.jsxs("div",{children:["Current selection (by state): ",t().selected]}),s.jsxs("div",{children:["Current selection (by action): ",o]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{c({selected:0}),n(t().selected)})},children:"Select None"})]})}const R=function(e){let t=l.useRef([]);const c=()=>t.current;return{schedulePostDispatchEvents:l.useCallback(({execute:n,context:u={}})=>{let r=c();const a={schedulerId:Math.floor(Math.random()*1e5),execute:n,type:e,context:u,unschedule:function(){let h=r.findIndex(p=>p.schedulerId===this.schedulerId);h!==-1&&r.splice(h,1)}};return r.push(a),t.current=r,a},[e]),queue:c}},D=(e,t)=>{const c=l.useCallback(o=>{const n=e();if(n.length===0)return;console.log(`useProcessJobQueue: Executing jobs for ${o}, count: ${n.length}`),n.filter(r=>r.type===o).map(r=>(r.execute(),console.log(`useProcessJobQueue: job ${r.schedulerId} executed`),r)).forEach(r=>{r.unschedule.bind(r)()})},[e]);l.useEffect(function(){c(t)})};function _(){const{getData:e,setData:t}=i({selected:6}),[c,o]=l.useState(e().selected),{schedulePostDispatchEvents:n,queue:u}=R("test");return l.useEffect(()=>{Promise.resolve().then(()=>{e().selected===0&&(t({selected:1}),n({execute:()=>{o(e().selected),console.log("Job (schedule in use effect promise) executed")}}))})},[e().selected]),D(u,"test"),s.jsxs("div",{children:[s.jsx("h3",{children:"Sample V1 (by DeferJobQueue Polyfill)"}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0}),n({execute:()=>{console.log("Job (schedule in action) executed"),o(e().selected)}}),n({execute:()=>{t({selected:2}),n({execute:()=>{console.log("Job (schedule in post action) executed"),o(e().selected)}})}})})},children:"Select None"})]})}const V=()=>{const[e,t]=l.useState([]),c=l.useCallback(o=>{t(n=>[...n,o])},[]);return l.useEffect(()=>{e.length>0&&(e.forEach(o=>{try{o.execute()}catch(n){console.error("useDeferredEffect: Error executing callback:",n)}}),t([]))},[e]),{defer:c}};function y(){const{getData:e,setData:t}=i({selected:6}),[c,o]=l.useState(e().selected),{defer:n}=V();return l.useEffect(()=>{Promise.resolve().then(()=>{e().selected===0&&n({execute:()=>{console.log("Job (schedule in use effect promise) executed")}})})},[e().selected]),s.jsxs("div",{children:[s.jsx("h3",{children:"Sample V2 (by fixed DeferJobQueue Polyfill)"}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0}),n({execute:()=>{o(e().selected)}})}).then(()=>fetch("/")).then(()=>{n({execute:()=>{console.log("Job (schedule in action promise) executed")}})}),setTimeout(()=>n({execute:()=>{console.log("Job (schedule in action setTimeout) executed")}}),100)},children:"Select None"})]})}function P(){const{getData:e,setData:t}=i({selected:6}),[c,o]=l.useState(e().selected);return l.useEffect(()=>{o(e().selected)},[e]),s.jsxs("div",{children:[s.jsx("h3",{children:"Sample V3 (by state update)"}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0})})},children:"Select None"})]})}const k=e=>{const t=l.useRef(e),[c,o]=l.useState(e);return{getData:()=>t.current,setData:n=>{t.current=n,o(n)}}};function J(){const{getData:e,setData:t}=k({selected:6}),[c,o]=l.useState(e().selected);return s.jsxs("div",{children:[s.jsx("h3",{children:"Sample V4 (by agnostic state)"}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0}),o(e().selected)})},children:"Select None"})]})}const f="r18-batch-sample-loader-element";function x(){const[e,t]=l.useState("V0");return s.jsxs("div",{children:[s.jsx("h1",{children:"React18 Batch Adjustment Sample"}),s.jsx(v,{options:["V0","V1","V2","V3","V4"],onChange:c=>t(c)}),e==="V0"&&s.jsx(g,{}),e==="V1"&&s.jsx(_,{}),e==="V2"&&s.jsx(y,{}),e==="V3"&&s.jsx(P,{}),e==="V4"&&s.jsx(J,{})]})}customElements.define(f,class extends HTMLElement{constructor(){super(...arguments);d(this,"_root",null);d(this,"_reactRootElem",null)}_unmountReactComponent(){this._root?(this._root.unmount(),this._root=null):m.unmountComponentAtNode(this._reactRootElem)}_mountReactComponent(t){t?m.render(l.createElement(x),this._reactRootElem):(this._root=C.createRoot(this._reactRootElem),this._root.render(l.createElement(x)))}connectedCallback(){const t=document.createElement("input");t.type="checkbox",t.checked=!1,t.addEventListener("change",()=>{this._unmountReactComponent(),this._mountReactComponent(t.checked)}),this.appendChild(t),this.appendChild(document.createTextNode("Compatible Mode"));const c=document.createElement("div");this.appendChild(c),this._reactRootElem=c,this._mountReactComponent(!1)}disconnectedCallback(){this._unmountReactComponent(),this._reactRootElem=null,this._root=null}});function T(){return l.createElement(f)}export{T as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
