var b=Object.defineProperty;var j=(e,t,c)=>t in e?b(e,t,{enumerable:!0,configurable:!0,writable:!0,value:c}):e[t]=c;var a=(e,t,c)=>j(e,typeof t!="symbol"?t+"":t,c);import{r as l,j as s,d as m,e as C}from"./index-DsO7cSML.js";function E({options:e,onChange:t}){const[c,n]=l.useState(e[0]);return e.map(o=>s.jsxs("label",{children:[s.jsx("input",{type:"radio",value:o,checked:c===o,onChange:u=>{n(u.target.value),t(u.target.value)}}),o]},o))}const d=e=>{const t=l.useRef(e),[c,n]=l.useState(e);return t.current=c,{getData:()=>t.current,setData:n}},v=e=>{const t=l.useRef(e),[c,n]=l.useState(e);return{getData:()=>t.current,setData:o=>{t.current=o,n(o)}}};function D(){const{getData:e,setData:t}=d({selected:6}),[c,n]=l.useState(e().selected);return s.jsxs("div",{children:[s.jsx("h3",{children:'Sample V0 (No fix, show the symptom)'}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0}),n(e().selected)})},children:"Select None"})]})}const R=function(e){let t=l.useRef([]);const c=()=>t.current;return{schedulePostDispatchEvents:l.useCallback(({execute:o,context:u={}})=>{let r=c();const i={schedulerId:Math.floor(Math.random()*1e5),execute:o,type:e,context:u,unschedule:function(){let h=r.findIndex(p=>p.schedulerId===this.schedulerId);h!==-1&&r.splice(h,1)}};return r.push(i),t.current=r,i},[e]),queue:c}},g=(e,t)=>{const c=l.useCallback(n=>{const o=e();if(o.length===0)return;o.filter(r=>r.type===n).map(r=>(r.execute(),console.log(`useProcessJobQueue: job ${r.schedulerId} executed`),r)).forEach(r=>{r.unschedule.bind(r)()})},[e]);l.useEffect(function(){console.log(`useProcessJobQueue: Executing jobs for ${t}`),c(t)})};function _(){const{getData:e,setData:t}=d({selected:6}),[c,n]=l.useState(e().selected),{schedulePostDispatchEvents:o,queue:u}=R("test");return g(u,"test"),s.jsxs("div",{children:[s.jsx("h3",{children:'Sample V1 (Use DeferJobQueue)'}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0}),o({execute:()=>{n(e().selected)}})}),setTimeout(()=>o({execute:()=>{console.log("Job2 (schedule in use effect) executed")}}),2e3)},children:"Select None"})]})}const V=()=>{const[e,t]=l.useState([]),c=l.useCallback(n=>{t(o=>[...o,n])},[]);return l.useEffect(()=>{e.length>0&&(e.forEach(n=>{try{n.execute()}catch(o){console.error("useDeferredEffect: Error executing callback:",o)}}),t([]))},[e]),{defer:c}};function k(){const{getData:e,setData:t}=d({selected:6}),[c,n]=l.useState(e().selected),{defer:o}=V();return s.jsxs("div",{children:[s.jsx("h3",{children:'Sample V2 (Use fixed DeferJobQueue)'}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0}),o({execute:()=>{n(e().selected)}})}),setTimeout(()=>o({execute:()=>{console.log("Job2 (schedule in use effect) executed")}}),2e3)},children:"Select None"})]})}function P(){const{getData:e,setData:t}=d({selected:6}),[c,n]=l.useState(e().selected);return l.useEffect(()=>{n(e().selected)},[e]),s.jsxs("div",{children:[s.jsx("h3",{children:'Sample V3 (Do post update by onUpdate)'}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0})})},children:"Select None"})]})}function y(){const{getData:e,setData:t}=v({selected:6}),[c,n]=l.useState(e().selected);return s.jsxs("div",{children:[s.jsx("h3",{children:'Sample V4 (Make state management agnostic of React)'}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0}),n(e().selected)})},children:"Select None"})]})}const f="r18-batch-sample-loader-element";function x(){const[e,t]=l.useState("V0");return s.jsxs("div",{children:[s.jsx("h1",{children:'Sample'}),s.jsx(E,{options:["V0","V1","V2","V3","V4"],onChange:c=>t(c)}),e==="V0"&&s.jsx(D,{}),e==="V1"&&s.jsx(_,{}),e==="V2"&&s.jsx(k,{}),e==="V3"&&s.jsx(P,{}),e==="V4"&&s.jsx(y,{})]})}customElements.define(f,class extends HTMLElement{constructor(){super(...arguments);a(this,"_root",null);a(this,"_reactRootElem",null)}_unmountReactComponent(){this._root?(this._root.unmount(),this._root=null):m.unmountComponentAtNode(this._reactRootElem)}_mountReactComponent(t){t?m.render(l.createElement(x),this._reactRootElem):(this._root=C.createRoot(this._reactRootElem),this._root.render(l.createElement(x)))}connectedCallback(){const t=document.createElement("input");t.type="checkbox",t.checked=!1,t.addEventListener("change",()=>{this._unmountReactComponent(),this._mountReactComponent(t.checked)}),this.appendChild(t),this.appendChild(document.createTextNode("Compatible Mode"));const c=document.createElement("div");this.appendChild(c),this._reactRootElem=c,this._mountReactComponent(!1)}disconnectedCallback(){this._unmountReactComponent(),this._reactRootElem=null,this._root=null}});function N(){return l.createElement(f)}export{N as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVmZXJKb2JRdWV1ZVNhbXBsZVBhZ2UtQ25UN0NFcmkuanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYWdlcy9kZWZlci9SYWRpb0J1dHRvbkdyb3VwLnRzeCIsIi4uLy4uL3NyYy9wYWdlcy9kZWZlci9EYXRhUHJvdmlkZXIudHMiLCIuLi8uLi9zcmMvcGFnZXMvZGVmZXIvU2FtcGxlVjAudHN4IiwiLi4vLi4vc3JjL3BhZ2VzL2RlZmVyL2xpYnMvdjEudHMiLCIuLi8uLi9zcmMvcGFnZXMvZGVmZXIvU2FtcGxlVjEudHN4IiwiLi4vLi4vc3JjL3BhZ2VzL2RlZmVyL2xpYnMvdjIudHMiLCIuLi8uLi9zcmMvcGFnZXMvZGVmZXIvU2FtcGxlVjIudHN4IiwiLi4vLi4vc3JjL3BhZ2VzL2RlZmVyL1NhbXBsZVYzLnRzeCIsIi4uLy4uL3NyYy9wYWdlcy9kZWZlci9TYW1wbGVWNC50c3giLCIuLi8uLi9zcmMvcGFnZXMvRGVmZXJKb2JRdWV1ZVNhbXBsZVBhZ2UudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBSYWRpb0J1dHRvbkdyb3VwKHtcbiAgb3B0aW9ucyxcbiAgb25DaGFuZ2UsXG59OiB7XG4gIG9wdGlvbnM6IHN0cmluZ1tdO1xuICBvbkNoYW5nZTogKG9wdGlvbjogc3RyaW5nKSA9PiB2b2lkO1xufSkge1xuICBjb25zdCBbc2VsZWN0ZWQsIHNldFNlbGVjdGVkXSA9IHVzZVN0YXRlKG9wdGlvbnNbMF0pO1xuICByZXR1cm4gb3B0aW9ucy5tYXAoKG9wdGlvbikgPT4gKFxuICAgIDxsYWJlbCBrZXk9e29wdGlvbn0+XG4gICAgICA8aW5wdXRcbiAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgdmFsdWU9e29wdGlvbn1cbiAgICAgICAgY2hlY2tlZD17c2VsZWN0ZWQgPT09IG9wdGlvbn1cbiAgICAgICAgb25DaGFuZ2U9eyhldikgPT4ge1xuICAgICAgICAgIHNldFNlbGVjdGVkKGV2LnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgb25DaGFuZ2UoZXYudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgICB7b3B0aW9ufVxuICAgIDwvbGFiZWw+XG4gICkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSYWRpb0J1dHRvbkdyb3VwO1xuIiwiaW1wb3J0IHsgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbnRlcmZhY2UgRGF0YVByb3ZpZGVyIHtcbiAgc2VsZWN0ZWQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IHVzZURhdGFQcm92aWRlciA9IChpbml0VmFsOiBEYXRhUHJvdmlkZXIpID0+IHtcbiAgY29uc3Qgc3RhdGVSZWYgPSB1c2VSZWYoaW5pdFZhbCk7XG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoaW5pdFZhbCk7XG5cbiAgLy8gd3JvbmcgaW1wbCB0byBtaW1pYyByZWFjdCBzdGF0ZSB1cGRhdGUgc2lkZSBlZmZlY3RcbiAgc3RhdGVSZWYuY3VycmVudCA9IHN0YXRlO1xuXG4gIHJldHVybiB7XG4gICAgZ2V0RGF0YTogKCkgPT4gc3RhdGVSZWYuY3VycmVudCxcbiAgICBzZXREYXRhOiBzZXRTdGF0ZSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VEYXRhUHJvdmlkZXJWMiA9IChpbml0VmFsOiBEYXRhUHJvdmlkZXIpID0+IHtcbiAgY29uc3Qgc3RhdGVSZWYgPSB1c2VSZWYoaW5pdFZhbCk7XG4gIGNvbnN0IFtfLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZShpbml0VmFsKTtcblxuICByZXR1cm4ge1xuICAgIGdldERhdGE6ICgpID0+IHN0YXRlUmVmLmN1cnJlbnQsXG4gICAgc2V0RGF0YTogKG5ld1N0YXRlOiBEYXRhUHJvdmlkZXIpID0+IHtcbiAgICAgIHN0YXRlUmVmLmN1cnJlbnQgPSBuZXdTdGF0ZTtcbiAgICAgIHNldFN0YXRlKG5ld1N0YXRlKTtcbiAgICB9XG4gIH07XG59OyIsImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VEYXRhUHJvdmlkZXIgfSBmcm9tIFwiLi9EYXRhUHJvdmlkZXJcIjtcblxuLy8gcjE3XG4vLyAtIGFsbCBzZXRTdGF0ZSB3aWxsIGJlIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG4vLyByMTggY29tcGF0aWJsZSBtb2RlXG4vLyAtIHNldFN0YXRlIGluIHN5bmMgbW9kZSB3aWxsIGJlIGJhdGNoZWRcbi8vIC0gc2V0U3RhdGUgaW4gYXN5bmMgbW9kZSB3aWxsIGJlIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG4vLyByMTggY29uY3VycmVudCBtb2RlXG4vLyAtIGFsbCBzZXRTdGF0ZSB3aWxsIGJlIGJhdGNoZWRcblxuZXhwb3J0IGZ1bmN0aW9uIFNhbXBsZVYwKCkge1xuICBjb25zdCB7IGdldERhdGEsIHNldERhdGEgfSA9IHVzZURhdGFQcm92aWRlcih7IHNlbGVjdGVkOiA2IH0pO1xuICBjb25zdCBbc2VsZWN0ZWQsIHNldFNlbGVjdGVkXSA9IHVzZVN0YXRlKGdldERhdGEoKS5zZWxlY3RlZCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgzPlwiU2NoZWR1bGVyXCIgU2FtcGxlIFYwIChObyBmaXgsIHNob3cgdGhlIHN5bXB0b20pPC9oMz5cbiAgICAgIDxkaXY+Q3VycmVudCBzZWxlY3Rpb24gKGJ5IHN0YXRlKToge2dldERhdGEoKS5zZWxlY3RlZH08L2Rpdj5cbiAgICAgIDxkaXY+Q3VycmVudCBzZWxlY3Rpb24gKGJ5IGFjdGlvbik6IHtzZWxlY3RlZH08L2Rpdj5cbiAgICAgIDxidXR0b25cbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgc2V0RGF0YSh7IHNlbGVjdGVkOiAwIH0pO1xuICAgICAgICAgICAgc2V0U2VsZWN0ZWQoZ2V0RGF0YSgpLnNlbGVjdGVkKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgU2VsZWN0IE5vbmVcbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBTYW1wbGVWMDtcbiIsImltcG9ydCB7IHVzZVJlZiwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbnRlcmZhY2UgSm9iIHtcbiAgc2NoZWR1bGVySWQ6IG51bWJlcjtcbiAgZXhlY3V0ZTogRnVuY3Rpb247XG4gIHR5cGU6IHN0cmluZztcbiAgY29udGV4dDogYW55O1xuICB1bnNjaGVkdWxlOiBGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGNvbnN0IHVzZVNjaGVkdWxlciA9IGZ1bmN0aW9uICh0eXBlOiBzdHJpbmcpIHtcbiAgbGV0IHNjaGVkdWxlclF1ZXVlUmVmZXJlbmNlID0gdXNlUmVmKFtdIGFzIEpvYltdKTtcbiAgY29uc3QgZ2V0U2NoZWR1bGVyUXVldWUgPSAoKSA9PiBzY2hlZHVsZXJRdWV1ZVJlZmVyZW5jZS5jdXJyZW50O1xuICBjb25zdCBzY2hlZHVsZVBvc3REaXNwYXRjaEV2ZW50cyA9IHVzZUNhbGxiYWNrKFxuICAgICh7IGV4ZWN1dGUsIGNvbnRleHQgPSB7fSB9OiB7IGV4ZWN1dGU6IEZ1bmN0aW9uOyBjb250ZXh0PzogYW55IH0pID0+IHtcbiAgICAgIGxldCBub3R5U2NoZWR1bGVyUXVldWUgPSBnZXRTY2hlZHVsZXJRdWV1ZSgpO1xuICAgICAgbGV0IGpvYklkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwKTtcbiAgICAgIGNvbnN0IHNjaGVkdWxlZEpvYjogSm9iID0ge1xuICAgICAgICBzY2hlZHVsZXJJZDogam9iSWQsXG4gICAgICAgIGV4ZWN1dGUsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIHVuc2NoZWR1bGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsZXQgaW5kZXggPSBub3R5U2NoZWR1bGVyUXVldWUuZmluZEluZGV4KFxuICAgICAgICAgICAgKGV2ZW50OiBKb2IpID0+IGV2ZW50LnNjaGVkdWxlcklkID09PSB0aGlzLnNjaGVkdWxlcklkXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpbmRleCAhPT0gLTEgJiYgbm90eVNjaGVkdWxlclF1ZXVlLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgbm90eVNjaGVkdWxlclF1ZXVlLnB1c2goc2NoZWR1bGVkSm9iKTtcbiAgICAgIHNjaGVkdWxlclF1ZXVlUmVmZXJlbmNlLmN1cnJlbnQgPSBub3R5U2NoZWR1bGVyUXVldWU7XG4gICAgICByZXR1cm4gc2NoZWR1bGVkSm9iO1xuICAgIH0sXG4gICAgW3R5cGVdXG4gICk7XG5cbiAgcmV0dXJuIHsgc2NoZWR1bGVQb3N0RGlzcGF0Y2hFdmVudHMsIHF1ZXVlOiBnZXRTY2hlZHVsZXJRdWV1ZSB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZVByb2Nlc3NKb2JRdWV1ZSA9IChcbiAgZ2V0U2NoZWR1bGVyUXVldWU6ICgpID0+IEpvYltdLFxuICB0eXBlOiBzdHJpbmdcbikgPT4ge1xuICBjb25zdCBmbiA9IHVzZUNhbGxiYWNrKFxuICAgICh0eXBlOiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXVlID0gZ2V0U2NoZWR1bGVyUXVldWUoKTtcbiAgICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IGpvYnNUb1Vuc2NoZWR1bGUgPSBxdWV1ZVxuICAgICAgICAuZmlsdGVyKChlKSA9PiBlLnR5cGUgPT09IHR5cGUpXG4gICAgICAgIC5tYXAoKGV2ZW50KSA9PiB7XG4gICAgICAgICAgZXZlbnQuZXhlY3V0ZSgpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKGB1c2VQcm9jZXNzSm9iUXVldWU6IGpvYiAke2V2ZW50LnNjaGVkdWxlcklkfSBleGVjdXRlZGApO1xuICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgfSk7XG4gICAgICBqb2JzVG9VbnNjaGVkdWxlLmZvckVhY2goKGV2ZW50OiBKb2IpID0+IHtcbiAgICAgICAgY29uc3QgdW5zY2hlZHVsZSA9IGV2ZW50LnVuc2NoZWR1bGUuYmluZChldmVudCk7XG4gICAgICAgIHVuc2NoZWR1bGUoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW2dldFNjaGVkdWxlclF1ZXVlXVxuICApO1xuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiBldmVudFByb2Nlc3NpbmdRdWV1ZSgpIHtcbiAgICBjb25zb2xlLmxvZyhgdXNlUHJvY2Vzc0pvYlF1ZXVlOiBFeGVjdXRpbmcgam9icyBmb3IgJHt0eXBlfWApO1xuICAgIGZuKHR5cGUpO1xuICB9KTtcbn07XG4iLCJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlRGF0YVByb3ZpZGVyIH0gZnJvbSBcIi4vRGF0YVByb3ZpZGVyXCI7XG5pbXBvcnQgeyB1c2VQcm9jZXNzSm9iUXVldWUsIHVzZVNjaGVkdWxlciB9IGZyb20gXCIuL2xpYnMvdjFcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFNhbXBsZVYxKCkge1xuICBjb25zdCB7IGdldERhdGEsIHNldERhdGEgfSA9IHVzZURhdGFQcm92aWRlcih7IHNlbGVjdGVkOiA2IH0pO1xuICBjb25zdCBbc2VsZWN0ZWQsIHNldFNlbGVjdGVkXSA9IHVzZVN0YXRlKGdldERhdGEoKS5zZWxlY3RlZCk7XG4gIGNvbnN0IHsgc2NoZWR1bGVQb3N0RGlzcGF0Y2hFdmVudHMsIHF1ZXVlIH0gPSB1c2VTY2hlZHVsZXIoXCJ0ZXN0XCIpO1xuXG4gIHVzZVByb2Nlc3NKb2JRdWV1ZShxdWV1ZSwgXCJ0ZXN0XCIpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxoMz5cIlNjaGVkdWxlclwiIFNhbXBsZSBWMSAoVXNlIERlZmVySm9iUXVldWUpPC9oMz5cbiAgICAgIDxkaXY+Q3VycmVudCBzZWxlY3Rpb24gKGJ5IHN0YXRlKToge2dldERhdGEoKS5zZWxlY3RlZH08L2Rpdj5cbiAgICAgIDxkaXY+Q3VycmVudCBzZWxlY3Rpb24gKGJ5IGFjdGlvbik6IHtzZWxlY3RlZH08L2Rpdj5cbiAgICAgIDxidXR0b25cbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgc2V0RGF0YSh7IHNlbGVjdGVkOiAwIH0pO1xuICAgICAgICAgICAgc2NoZWR1bGVQb3N0RGlzcGF0Y2hFdmVudHMoe1xuICAgICAgICAgICAgICBleGVjdXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0U2VsZWN0ZWQoZ2V0RGF0YSgpLnNlbGVjdGVkKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIGlzc3VlIGZvciB2MTogdGhpcyBzY2hlZHVsZSB3aWxsIG5vdCBiZSBleGVjdXRlZFxuICAgICAgICAgIHNldFRpbWVvdXQoXG4gICAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgICBzY2hlZHVsZVBvc3REaXNwYXRjaEV2ZW50cyh7XG4gICAgICAgICAgICAgICAgZXhlY3V0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJKb2IyIChzY2hlZHVsZSBpbiB1c2UgZWZmZWN0KSBleGVjdXRlZFwiKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIDIwMDBcbiAgICAgICAgICApO1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICBTZWxlY3QgTm9uZVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNhbXBsZVYxO1xuIiwiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBKb2Ige1xuICBleGVjdXRlOiBGdW5jdGlvbjtcbiAgam9iSWQ/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQSBob29rIHRvIGRlZmVyIHRhc2tzIHVudGlsIG5leHQgc3RhdGUgdXBkYXRlLlxuICogXG4gKiAtIFRhc2sgY291bGQgYmUgc3luYyBvciBhc3luYywgYnV0IGl0IHdpbGwgYmUganVzdCBzaW1wbHkgdHJpZ2dlcmVkLlxuICogLSBUYXNrIGNvdWxkIGJlIGFkZGVkIGJ5IHN5bmMgb3IgYXN5bmMsIGJ1dCBpdCB3aWxsIGJlIGV4ZWN1dGVkIGluIHRoZSBuZXh0IHN0YXRlIHVwZGF0ZSwgYW5kIHRoZSBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCBlc3BlY2lhbGx5IGZvciB0aGUgdGFzayBhZGRlZCBieSBhc3luYy5cbiAqIFxuICogXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGRlZmVyIC0gQSBmdW5jdGlvbiB0byBkZWZlciBhIGNhbGxiYWNrLlxuICovXG5leHBvcnQgY29uc3QgdXNlRGVmZXJKb2JRdWV1ZSA9ICgpID0+IHtcbiAgY29uc3QgW2pvYlF1ZXVlLCBzZXRKb2JRdWV1ZV0gPSB1c2VTdGF0ZShbXSBhcyBKb2JbXSk7XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjYWxsYmFjayB0byB0aGUgcXVldWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgKi9cbiAgY29uc3QgYWRkSm9iID0gdXNlQ2FsbGJhY2soKGpvYjogSm9iKSA9PiB7XG4gICAgICBzZXRKb2JRdWV1ZSgocHJldlF1ZXVlKSA9PiBbLi4ucHJldlF1ZXVlLCBqb2JdKTtcbiAgfSwgW10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGpvYlF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgIGpvYlF1ZXVlLmZvckVhY2goKGpvYikgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGpvYi5leGVjdXRlKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcigndXNlRGVmZXJyZWRFZmZlY3Q6IEVycm9yIGV4ZWN1dGluZyBjYWxsYmFjazonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgc2V0Sm9iUXVldWUoW10pOyAvLyBDbGVhciB0aGUgcXVldWUgYWZ0ZXIgZXhlY3V0aW9uXG4gICAgfVxuICB9LCBbam9iUXVldWVdKTtcblxuICByZXR1cm4geyBkZWZlcjogYWRkSm9iIH07XG59O1xuIiwiaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZURhdGFQcm92aWRlciB9IGZyb20gXCIuL0RhdGFQcm92aWRlclwiO1xuaW1wb3J0IHsgdXNlRGVmZXJKb2JRdWV1ZSB9IGZyb20gXCIuL2xpYnMvdjJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFNhbXBsZVYyKCkge1xuICBjb25zdCB7IGdldERhdGEsIHNldERhdGEgfSA9IHVzZURhdGFQcm92aWRlcih7IHNlbGVjdGVkOiA2IH0pO1xuICBjb25zdCBbc2VsZWN0ZWQsIHNldFNlbGVjdGVkXSA9IHVzZVN0YXRlKGdldERhdGEoKS5zZWxlY3RlZCk7XG4gIGNvbnN0IHsgZGVmZXIgfSA9IHVzZURlZmVySm9iUXVldWUoKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDM+XCJTY2hlZHVsZXJcIiBTYW1wbGUgVjIgKFVzZSBmaXhlZCBEZWZlckpvYlF1ZXVlKTwvaDM+XG4gICAgICA8ZGl2PkN1cnJlbnQgc2VsZWN0aW9uIChieSBzdGF0ZSk6IHtnZXREYXRhKCkuc2VsZWN0ZWR9PC9kaXY+XG4gICAgICA8ZGl2PkN1cnJlbnQgc2VsZWN0aW9uIChieSBhY3Rpb24pOiB7c2VsZWN0ZWR9PC9kaXY+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHNldERhdGEoeyBzZWxlY3RlZDogMCB9KTtcbiAgICAgICAgICAgIGRlZmVyKHtcbiAgICAgICAgICAgICAgZXhlY3V0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFNlbGVjdGVkKGdldERhdGEoKS5zZWxlY3RlZCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBpc3N1ZSBmb3IgdjE6IHRoaXMgc2NoZWR1bGUgd2lsbCBub3QgYmUgZXhlY3V0ZWRcbiAgICAgICAgICBzZXRUaW1lb3V0KFxuICAgICAgICAgICAgKCkgPT5cbiAgICAgICAgICAgICAgZGVmZXIoe1xuICAgICAgICAgICAgICAgIGV4ZWN1dGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSm9iMiAoc2NoZWR1bGUgaW4gdXNlIGVmZmVjdCkgZXhlY3V0ZWRcIik7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAyMDAwXG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgU2VsZWN0IE5vbmVcbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBTYW1wbGVWMjtcbiIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZURhdGFQcm92aWRlciB9IGZyb20gXCIuL0RhdGFQcm92aWRlclwiO1xuXG5leHBvcnQgZnVuY3Rpb24gU2FtcGxlVjMoKSB7XG4gIGNvbnN0IHsgZ2V0RGF0YSwgc2V0RGF0YSB9ID0gdXNlRGF0YVByb3ZpZGVyKHsgc2VsZWN0ZWQ6IDYgfSk7XG4gIGNvbnN0IFtzZWxlY3RlZCwgc2V0U2VsZWN0ZWRdID0gdXNlU3RhdGUoZ2V0RGF0YSgpLnNlbGVjdGVkKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldFNlbGVjdGVkKGdldERhdGEoKS5zZWxlY3RlZCk7XG4gIH0sIFtnZXREYXRhXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgzPlwiU2NoZWR1bGVyXCIgU2FtcGxlIFYzIChEbyBwb3N0IHVwZGF0ZSBieSBvblVwZGF0ZSk8L2gzPlxuICAgICAgPGRpdj5DdXJyZW50IHNlbGVjdGlvbiAoYnkgc3RhdGUpOiB7Z2V0RGF0YSgpLnNlbGVjdGVkfTwvZGl2PlxuICAgICAgPGRpdj5DdXJyZW50IHNlbGVjdGlvbiAoYnkgYWN0aW9uKToge3NlbGVjdGVkfTwvZGl2PlxuICAgICAgPGJ1dHRvblxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBzZXREYXRhKHsgc2VsZWN0ZWQ6IDAgfSk7XG4gICAgICAgICAgICAvLyBzZXRTZWxlY3RlZChnZXREYXRhKCkuc2VsZWN0ZWQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICBTZWxlY3QgTm9uZVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNhbXBsZVYzOyIsImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VEYXRhUHJvdmlkZXJWMiBhcyB1c2VEYXRhUHJvdmlkZXIgfSBmcm9tIFwiLi9EYXRhUHJvdmlkZXJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFNhbXBsZVY0KCkge1xuICBjb25zdCB7IGdldERhdGEsIHNldERhdGEgfSA9IHVzZURhdGFQcm92aWRlcih7IHNlbGVjdGVkOiA2IH0pO1xuICBjb25zdCBbc2VsZWN0ZWQsIHNldFNlbGVjdGVkXSA9IHVzZVN0YXRlKGdldERhdGEoKS5zZWxlY3RlZCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPGgzPlwiU2NoZWR1bGVyXCIgU2FtcGxlIFY0IChNYWtlIHN0YXRlIG1hbmFnZW1lbnQgYWdub3N0aWMgb2YgUmVhY3QpPC9oMz5cbiAgICAgIDxkaXY+Q3VycmVudCBzZWxlY3Rpb24gKGJ5IHN0YXRlKToge2dldERhdGEoKS5zZWxlY3RlZH08L2Rpdj5cbiAgICAgIDxkaXY+Q3VycmVudCBzZWxlY3Rpb24gKGJ5IGFjdGlvbik6IHtzZWxlY3RlZH08L2Rpdj5cbiAgICAgIDxidXR0b25cbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgc2V0RGF0YSh7IHNlbGVjdGVkOiAwIH0pO1xuICAgICAgICAgICAgc2V0U2VsZWN0ZWQoZ2V0RGF0YSgpLnNlbGVjdGVkKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgU2VsZWN0IE5vbmVcbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBTYW1wbGVWNDtcbiIsImltcG9ydCBSZWFjdERPTUNsaWVudCBmcm9tIFwicmVhY3QtZG9tL2NsaWVudFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcbmltcG9ydCB7IHVzZVN0YXRlLCBjcmVhdGVFbGVtZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSYWRpb0J1dHRvbkdyb3VwIH0gZnJvbSBcIi4vZGVmZXIvUmFkaW9CdXR0b25Hcm91cFwiO1xuaW1wb3J0IHsgU2FtcGxlVjAgfSBmcm9tIFwiLi9kZWZlci9TYW1wbGVWMFwiO1xuaW1wb3J0IHsgU2FtcGxlVjEgfSBmcm9tIFwiLi9kZWZlci9TYW1wbGVWMVwiO1xuaW1wb3J0IHsgU2FtcGxlVjIgfSBmcm9tIFwiLi9kZWZlci9TYW1wbGVWMlwiO1xuaW1wb3J0IHsgU2FtcGxlVjMgfSBmcm9tIFwiLi9kZWZlci9TYW1wbGVWM1wiO1xuaW1wb3J0IHsgU2FtcGxlVjQgfSBmcm9tIFwiLi9kZWZlci9TYW1wbGVWNFwiO1xuXG5jb25zdCBERUZFUl9TQU1QTEVfTE9BREVSID0gXCJkZWZlci1zYW1wbGUtbG9hZGVyLWVsZW1lbnRcIjtcblxuZnVuY3Rpb24gU2NoZWR1bGVyU2FtcGxlKCkge1xuICBjb25zdCBbdmVyc2lvbiwgc2V0VmVyc2lvbl0gPSB1c2VTdGF0ZShcIlYwXCIpO1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDE+XCJTY2hlZHVsZXJcIiBTYW1wbGU8L2gxPlxuICAgICAgPFJhZGlvQnV0dG9uR3JvdXBcbiAgICAgICAgb3B0aW9ucz17W1wiVjBcIiwgXCJWMVwiLCBcIlYyXCIsIFwiVjNcIiwgXCJWNFwiXX1cbiAgICAgICAgb25DaGFuZ2U9eyh2OiBzdHJpbmcpID0+IHNldFZlcnNpb24odil9XG4gICAgICAvPlxuICAgICAge3ZlcnNpb24gPT09IFwiVjBcIiAmJiA8U2FtcGxlVjAgLz59XG4gICAgICB7dmVyc2lvbiA9PT0gXCJWMVwiICYmIDxTYW1wbGVWMSAvPn1cbiAgICAgIHt2ZXJzaW9uID09PSBcIlYyXCIgJiYgPFNhbXBsZVYyIC8+fVxuICAgICAge3ZlcnNpb24gPT09IFwiVjNcIiAmJiA8U2FtcGxlVjMgLz59XG4gICAgICB7dmVyc2lvbiA9PT0gXCJWNFwiICYmIDxTYW1wbGVWNCAvPn1cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuLy8gY3VzdG9tIGVsZW1lbnQgbG9hZGVyIHRvIHN1cHBvcnQgc3dpdGNoaW5nIGJldHdlZW4gY29tcGF0aWJsZSBtb2RlIGFuZCBjb25jdXJyZW50IG1vZGVcbmN1c3RvbUVsZW1lbnRzLmRlZmluZShERUZFUl9TQU1QTEVfTE9BREVSLCBjbGFzcyBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgcHJpdmF0ZSBfcm9vdDogUmVhY3RET01DbGllbnQuUm9vdCB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIF9yZWFjdFJvb3RFbGVtOiBIVE1MRGl2RWxlbWVudCB8IG51bGwgPSBudWxsO1xuXG4gIF91bm1vdW50UmVhY3RDb21wb25lbnQoKSB7XG4gICAgaWYgKHRoaXMuX3Jvb3QpIHtcbiAgICAgIHRoaXMuX3Jvb3QudW5tb3VudCgpO1xuICAgICAgdGhpcy5fcm9vdCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUodGhpcy5fcmVhY3RSb290RWxlbSEpO1xuICAgIH1cbiAgfVxuXG4gIF9tb3VudFJlYWN0Q29tcG9uZW50KGNvbXBhdGlibGVNb2RlOiBib29sZWFuKSB7XG4gICAgaWYgKGNvbXBhdGlibGVNb2RlKSB7XG4gICAgICBSZWFjdERPTS5yZW5kZXIoXG4gICAgICAgIGNyZWF0ZUVsZW1lbnQoU2NoZWR1bGVyU2FtcGxlKSxcbiAgICAgICAgdGhpcy5fcmVhY3RSb290RWxlbSFcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Jvb3QgPSBSZWFjdERPTUNsaWVudC5jcmVhdGVSb290KHRoaXMuX3JlYWN0Um9vdEVsZW0hKTtcbiAgICAgIHRoaXMuX3Jvb3QucmVuZGVyKGNyZWF0ZUVsZW1lbnQoU2NoZWR1bGVyU2FtcGxlKSk7XG4gICAgfVxuICB9XG5cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgLy8gQ3JlYXRlIG1vZGUgb3B0aW9uIGNoZWNrIGJveFxuICAgIGNvbnN0IG1vZGVPcHRpb25FbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIG1vZGVPcHRpb25FbGVtLnR5cGUgPSBcImNoZWNrYm94XCI7XG4gICAgbW9kZU9wdGlvbkVsZW0uY2hlY2tlZCA9IGZhbHNlO1xuICAgIG1vZGVPcHRpb25FbGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5fdW5tb3VudFJlYWN0Q29tcG9uZW50KCk7XG4gICAgICB0aGlzLl9tb3VudFJlYWN0Q29tcG9uZW50KG1vZGVPcHRpb25FbGVtLmNoZWNrZWQpO1xuICAgIH0pO1xuICAgIHRoaXMuYXBwZW5kQ2hpbGQobW9kZU9wdGlvbkVsZW0pO1xuICAgIHRoaXMuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJDb21wYXRpYmxlIE1vZGVcIikpO1xuXG4gICAgLy8gQ3JlYXRlIHJlYWN0IHJvb3QgZWxlbWVudFxuICAgIGNvbnN0IHJlYWN0Um9vdEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRoaXMuYXBwZW5kQ2hpbGQocmVhY3RSb290RWxlbSk7XG4gICAgdGhpcy5fcmVhY3RSb290RWxlbSA9IHJlYWN0Um9vdEVsZW07XG5cbiAgICAvLyBNb3VudCByZWFjdCBjb21wb25lbnRcbiAgICB0aGlzLl9tb3VudFJlYWN0Q29tcG9uZW50KGZhbHNlKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMuX3VubW91bnRSZWFjdENvbXBvbmVudCgpO1xuICAgIHRoaXMuX3JlYWN0Um9vdEVsZW0gPSBudWxsO1xuICAgIHRoaXMuX3Jvb3QgPSBudWxsO1xuICB9XG59KTtcblxuLy8gcmVhY3QgbG9hZGVyXG5mdW5jdGlvbiBTY2hlZHVsZXJTYW1wbGVQYWdlKCkge1xuICByZXR1cm4gY3JlYXRlRWxlbWVudChERUZFUl9TQU1QTEVfTE9BREVSKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2NoZWR1bGVyU2FtcGxlUGFnZTtcblxuLypcbmZ1bmN0aW9uIFNjaGVkdWxlclNhbXBsZVYxKCkge1xuICBjb25zdCB7IHNjaGVkdWxlUG9zdERpc3BhdGNoRXZlbnRzLCBxdWV1ZSB9ID0gdXNlU2NoZWR1bGVyKFwidGVzdFwiKTtcblxuICBjb25zdCBqb2IxID0gc2NoZWR1bGVQb3N0RGlzcGF0Y2hFdmVudHMoe1xuICAgIGV4ZWN1dGU6ICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiSm9iMSAoc2NoZWR1bGUgaW4gcmVuZGVyIGN5Y2xlKSBleGVjdXRlZFwiKTtcbiAgICB9LFxuICB9KTtcbiAgY29uc29sZS5sb2coXG4gICAgYEpvYjEgKHNjaGVkdWxlIGluIHJlbmRlciBjeWNsZSkgc2NoZWR1bGVkIC0gJHtqb2IxLnNjaGVkdWxlcklkfWBcbiAgKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGpvYjIgPSBzY2hlZHVsZVBvc3REaXNwYXRjaEV2ZW50cyh7XG4gICAgICBleGVjdXRlOiAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiSm9iMiAoc2NoZWR1bGUgaW4gdXNlIGVmZmVjdCkgZXhlY3V0ZWRcIik7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYEpvYjIgKHNjaGVkdWxlIGluIHVzZSBlZmZlY3QpIHNjaGVkdWxlZCAtICR7am9iMi5zY2hlZHVsZXJJZH1gXG4gICAgKTtcbiAgfSk7XG5cbiAgY29uc3QgW2NvdW50LCBzZXRDb3VudF0gPSB1c2VTdGF0ZSgwKTtcblxuICBjb25zdCByZW5kZXJDeWNsZUNvdW50ID0gdXNlUmVmKDApO1xuXG4gIHVzZVByb2Nlc3NKb2JRdWV1ZShxdWV1ZSwgXCJ0ZXN0XCIpO1xuXG4gIGNvbnNvbGUubG9nKFwiRXhlY3V0aW5nIHJlbmRlciBjeWNsZSBjb3VudDogXCIsIHJlbmRlckN5Y2xlQ291bnQuY3VycmVudCsrKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDM+XCJTY2hlZHVsZXJcIiBTYW1wbGUgVjA8L2gzPlxuICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBzZXRDb3VudChjb3VudCArIDEpfT57Y291bnR9PC9idXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmZ1bmN0aW9uIFNjaGVkdWxlclNhbXBsZVYyKCkge1xuICBjb25zdCBbY291bnQsIHNldENvdW50XSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCByZW5kZXJDeWNsZUNvdW50ID0gdXNlUmVmKDApO1xuXG4gIGNvbnN0IHsgZGVmZXIgfSA9IHVzZURlZmVySm9iUXVldWUoKTtcblxuICBpZiAocmVuZGVyQ3ljbGVDb3VudC5jdXJyZW50ICUgNSA9PT0gMCkge1xuICAgIGRlZmVyKHtcbiAgICAgIGV4ZWN1dGU6ICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJKb2IxIChzY2hlZHVsZSBpbiByZW5kZXIgY3ljbGUpIGV4ZWN1dGVkXCIpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyhgSm9iMSAoc2NoZWR1bGUgaW4gcmVuZGVyIGN5Y2xlKSBzY2hlZHVsZWRgKTtcbiAgfVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gTk9URTogXG4gICAgLy8gLSBXaXRoIDFzdCBkZWZlciwgcmVuZGVyQ3ljbGVDb3VudC5jdXJyZW50IGlzIDJcbiAgICAvLyAtIFdpdGhvdXQgMXN0IGRlZmVyLCByZW5kZXJDeWNsZUNvdW50LmN1cnJlbnQgaXMgMVxuICAgIGNvbnNvbGUubG9nKFwidXNlRWZmZWN0OiBjdXJyZW50IHJlbmRlciBjeWNsZSBjb3VudDogXCIsIHJlbmRlckN5Y2xlQ291bnQuY3VycmVudCk7XG4gICAgaWYgKHJlbmRlckN5Y2xlQ291bnQuY3VycmVudCAlIDUgPT09IDIpIHtcbiAgICAgIGRlZmVyKHtcbiAgICAgICAgZXhlY3V0ZTogKCkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiSm9iMiAoc2NoZWR1bGUgaW4gdXNlIGVmZmVjdCkgZXhlY3V0ZWRcIik7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIGNvbnNvbGUubG9nKGBKb2IyIChzY2hlZHVsZSBpbiB1c2UgZWZmZWN0KSBzY2hlZHVsZWRgKTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnNvbGUubG9nKFwiRXhlY3V0aW5nIHJlbmRlciBjeWNsZSBjb3VudDogXCIsIHJlbmRlckN5Y2xlQ291bnQuY3VycmVudCsrKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDM+XCJTY2hlZHVsZXJcIiBTYW1wbGUgVjA8L2gzPlxuICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBzZXRDb3VudChjb3VudCArIDEpfT57Y291bnR9PC9idXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59XG4gICovXG4iXSwibmFtZXMiOlsiUmFkaW9CdXR0b25Hcm91cCIsIm9wdGlvbnMiLCJvbkNoYW5nZSIsInNlbGVjdGVkIiwic2V0U2VsZWN0ZWQiLCJ1c2VTdGF0ZSIsIm9wdGlvbiIsImpzeCIsImV2IiwidXNlRGF0YVByb3ZpZGVyIiwiaW5pdFZhbCIsInN0YXRlUmVmIiwidXNlUmVmIiwic3RhdGUiLCJzZXRTdGF0ZSIsInVzZURhdGFQcm92aWRlclYyIiwiXyIsIm5ld1N0YXRlIiwiU2FtcGxlVjAiLCJnZXREYXRhIiwic2V0RGF0YSIsInVzZVNjaGVkdWxlciIsInR5cGUiLCJzY2hlZHVsZXJRdWV1ZVJlZmVyZW5jZSIsImdldFNjaGVkdWxlclF1ZXVlIiwidXNlQ2FsbGJhY2siLCJleGVjdXRlIiwiY29udGV4dCIsIm5vdHlTY2hlZHVsZXJRdWV1ZSIsInNjaGVkdWxlZEpvYiIsImluZGV4IiwiZXZlbnQiLCJ1c2VQcm9jZXNzSm9iUXVldWUiLCJmbiIsInF1ZXVlIiwiZSIsInVzZUVmZmVjdCIsIlNhbXBsZVYxIiwic2NoZWR1bGVQb3N0RGlzcGF0Y2hFdmVudHMiLCJ1c2VEZWZlckpvYlF1ZXVlIiwiam9iUXVldWUiLCJzZXRKb2JRdWV1ZSIsImFkZEpvYiIsImpvYiIsInByZXZRdWV1ZSIsImVycm9yIiwiU2FtcGxlVjIiLCJkZWZlciIsIlNhbXBsZVYzIiwiU2FtcGxlVjQiLCJERUZFUl9TQU1QTEVfTE9BREVSIiwiU2NoZWR1bGVyU2FtcGxlIiwidmVyc2lvbiIsInNldFZlcnNpb24iLCJ2IiwiX19wdWJsaWNGaWVsZCIsIlJlYWN0RE9NIiwiY29tcGF0aWJsZU1vZGUiLCJjcmVhdGVFbGVtZW50IiwiUmVhY3RET01DbGllbnQiLCJtb2RlT3B0aW9uRWxlbSIsInJlYWN0Um9vdEVsZW0iLCJTY2hlZHVsZXJTYW1wbGVQYWdlIl0sIm1hcHBpbmdzIjoiaU9BRU8sU0FB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
