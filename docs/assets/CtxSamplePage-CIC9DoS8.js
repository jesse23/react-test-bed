import{r as d,u as j,j as t,p as u,s as w,b as S}from"./index-BK2RadcX.js";const p=new WeakMap,b=(e,s)=>{const n={init:e,read:i=>i(n),write:(i,o,l)=>{typeof l=="function"?o(n,l(i(n))):o(n,l)}};return n},a=e=>{let s=p.get(e);return s||(s={value:e.init,listeners:new Set,dependents:new Set},p.set(e,s)),s},h=e=>{const s=a(e),n=o=>o===e?s.value:(a(o).dependents.add(e),h(o)),i=e.read(n);return s.value=i,i},C=e=>{const s=a(e);s.dependents.forEach(n=>{n!==e&&C(n)}),s.listeners.forEach(n=>n())},v=(e,s)=>{var l;const n=a(e),i=r=>a(r).value,o=(r,c)=>{if(r===e){n.value=c,C(e);return}v(r,c)};(l=e.write)==null||l.call(e,i,o,s)},y=e=>{const[s,n]=d.useState();return d.useEffect(()=>{const o=()=>n(h(e)),l=a(e);return l.listeners.add(o),o(),()=>{l.listeners.delete(o)}},[e]),[s,o=>{v(e,o)}]},g=b(""),f=({scopeId:e})=>{const[s,n]=d.useState(""),[i,o]=d.useState(""),[l,r]=y(g);return d.useEffect(()=>{const c=w({topic:"update.LeafComponent",channel:e,handler:m=>{o(m)}});return()=>{S(c)}},[]),t.jsxs("div",{style:{border:"1px solid white",margin:"10px",padding:"10px",width:"100%"},children:[t.jsxs("div",{children:["Ctx: '",l,"'"]}),t.jsxs("div",{children:["Data: '",s,"'"]}),t.jsxs("div",{children:["Event: '",i,"'"]}),t.jsx("button",{onClick:()=>u({topic:"update.LeafComponent",channel:e,payload:`event from ${e}`}),children:"Update Event"}),t.jsx("button",{onClick:()=>r("Hello"),children:"Update Ctx"}),t.jsx("button",{onClick:()=>n("Hello"),children:"Update State"})]})},x=({scopeId:e})=>t.jsxs("div",{style:{width:"100%",display:"flex",flexDirection:"row"},children:[t.jsx(f,{scopeId:`${e}:leftCell`}),t.jsx(f,{scopeId:"rightCell"})]}),E=()=>t.jsxs("div",{style:{width:"100%",display:"flex",flexDirection:"column"},children:[t.jsx(x,{scopeId:"firstRow"}),t.jsx(x,{scopeId:"secondRow"})]}),A=()=>t.jsxs("div",{style:{display:"flex",flexDirection:"row",border:"1px solid white",margin:"10px",padding:"10px"},children:[t.jsx("button",{onClick:()=>u({topic:"update.LeafComponent",channel:"firstRow:leftCell",payload:"event from firstRow:leftCell"}),children:"Event to firstRow:leftCell"}),t.jsx("button",{onClick:()=>u({topic:"update.LeafComponent",channel:"rightCell",payload:"event from rightCell"}),children:"Event to rightCell"})]}),D=()=>(j("./OpsSamplePage.css","dynamic-css"),t.jsxs("div",{style:{width:"100%",display:"flex",flexDirection:"column"},children:[t.jsx(A,{}),t.jsx(E,{})]}));export{D as CtxSamplePage,D as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
