var p=Object.defineProperty;var S=(e,t,c)=>t in e?p(e,t,{enumerable:!0,configurable:!0,writable:!0,value:c}):e[t]=c;var a=(e,t,c)=>S(e,typeof t!="symbol"?t+"":t,c);import{r as l,j as s,d as m,e as C}from"./index-BK2RadcX.js";function E({options:e,onChange:t}){const[c,n]=l.useState(e[0]);return e.map(o=>s.jsxs("label",{children:[s.jsx("input",{type:"radio",value:o,checked:c===o,onChange:u=>{n(u.target.value),t(u.target.value)}}),o]},o))}const d=e=>{const t=l.useRef(e),[c,n]=l.useState(e);return t.current=c,{getData:()=>t.current,setData:n}};function v(){const{getData:e,setData:t}=d({selected:6}),[c,n]=l.useState(e().selected);return s.jsxs("div",{children:[s.jsx("h3",{children:"Sample V0 (No fix, show the symptom)"}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0}),n(e().selected)})},children:"Select None"})]})}const R=function(e){let t=l.useRef([]);const c=()=>t.current;return{schedulePostDispatchEvents:l.useCallback(({execute:o,context:u={}})=>{let r=c();const i={schedulerId:Math.floor(Math.random()*1e5),execute:o,type:e,context:u,unschedule:function(){let h=r.findIndex(j=>j.schedulerId===this.schedulerId);h!==-1&&r.splice(h,1)}};return r.push(i),t.current=r,i},[e]),queue:c}},D=(e,t)=>{const c=l.useCallback(n=>{const o=e();if(o.length===0)return;o.filter(r=>r.type===n).map(r=>(r.execute(),console.log(`useProcessJobQueue: job ${r.schedulerId} executed`),r)).forEach(r=>{r.unschedule.bind(r)()})},[e]);l.useEffect(function(){console.log(`useProcessJobQueue: Executing jobs for ${t}`),c(t)})};function g(){const{getData:e,setData:t}=d({selected:6}),[c,n]=l.useState(e().selected),{schedulePostDispatchEvents:o,queue:u}=R("test");return D(u,"test"),s.jsxs("div",{children:[s.jsx("h3",{children:"Sample V1 (by DeferJobQueue Polyfill)"}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0}),o({execute:()=>{n(e().selected)}})}),setTimeout(()=>o({execute:()=>{console.log("Job2 (schedule in use effect) executed")}}),2e3)},children:"Select None"})]})}const _=()=>{const[e,t]=l.useState([]),c=l.useCallback(n=>{t(o=>[...o,n])},[]);return l.useEffect(()=>{e.length>0&&(e.forEach(n=>{try{n.execute()}catch(o){console.error("useDeferredEffect: Error executing callback:",o)}}),t([]))},[e]),{defer:c}};function y(){const{getData:e,setData:t}=d({selected:6}),[c,n]=l.useState(e().selected),{defer:o}=_();return s.jsxs("div",{children:[s.jsx("h3",{children:"Sample V2 (by fixed DeferJobQueue Polyfill)"}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0}),o({execute:()=>{n(e().selected)}})}),setTimeout(()=>o({execute:()=>{console.log("Job2 (schedule in use effect) executed")}}),2e3)},children:"Select None"})]})}function V(){const{getData:e,setData:t}=d({selected:6}),[c,n]=l.useState(e().selected);return l.useEffect(()=>{n(e().selected)},[e]),s.jsxs("div",{children:[s.jsx("h3",{children:"Sample V3 (by state update)"}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0})})},children:"Select None"})]})}const P=e=>{const t=l.useRef(e),[c,n]=l.useState(e);return{getData:()=>t.current,setData:o=>{t.current=o,n(o)}}};function k(){const{getData:e,setData:t}=P({selected:6}),[c,n]=l.useState(e().selected);return s.jsxs("div",{children:[s.jsx("h3",{children:"Sample V4 (by agnostic state)"}),s.jsxs("div",{children:["Current selection (by state): ",e().selected]}),s.jsxs("div",{children:["Current selection (by action): ",c]}),s.jsx("button",{onClick:()=>{Promise.resolve().then(()=>{t({selected:0}),n(e().selected)})},children:"Select None"})]})}const f="r18-batch-sample-loader-element";function x(){const[e,t]=l.useState("V0");return s.jsxs("div",{children:[s.jsx("h1",{children:"React18 Batch Adjustment Sample"}),s.jsx(E,{options:["V0","V1","V2","V3","V4"],onChange:c=>t(c)}),e==="V0"&&s.jsx(v,{}),e==="V1"&&s.jsx(g,{}),e==="V2"&&s.jsx(y,{}),e==="V3"&&s.jsx(V,{}),e==="V4"&&s.jsx(k,{})]})}customElements.define(f,class extends HTMLElement{constructor(){super(...arguments);a(this,"_root",null);a(this,"_reactRootElem",null)}_unmountReactComponent(){this._root?(this._root.unmount(),this._root=null):m.unmountComponentAtNode(this._reactRootElem)}_mountReactComponent(t){t?m.render(l.createElement(x),this._reactRootElem):(this._root=C.createRoot(this._reactRootElem),this._root.render(l.createElement(x)))}connectedCallback(){const t=document.createElement("input");t.type="checkbox",t.checked=!1,t.addEventListener("change",()=>{this._unmountReactComponent(),this._mountReactComponent(t.checked)}),this.appendChild(t),this.appendChild(document.createTextNode("Compatible Mode"));const c=document.createElement("div");this.appendChild(c),this._reactRootElem=c,this._mountReactComponent(!1)}disconnectedCallback(){this._unmountReactComponent(),this._reactRootElem=null,this._root=null}});function N(){return l.createElement(f)}export{N as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
